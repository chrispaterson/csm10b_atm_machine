#include "stdafx.h"
#include "Controller.h"
#include "curses.h"
#include "LoginModule.h"
#include "LoginStruct.h"
#include "AccountModule.h"
#include "DisplayMesageView.h"
#include "HomeModule.h"
#include "UserCreationModule.h"
#include "NewAccountModule.h"
#include <memory>
#include <iostream>

Controller::Controller()
{
	// initializes display out put for pdcurses
	initscr();
	cbreak();

	// mv and print the top header
	mvprintw(1, 3, "Bank of CS M10B");

	// creates new Home Modules
	std::unique_ptr<HomeModule> homeModule(new HomeModule());

	// login
	if (homeModule->getSelected() == 0) {

		// they've selected to log in
		showLoginModule();
	}
	// Create a new user
	else {
		showUserCreationModule();
	}
}

void Controller::showLoginModule() {

	// creates loginModule with a series of views
	LoginModule loginModule;

	// once they log in we get a pointer to the login struct
	// we'll carry that pointer through the whole application
	showAccountModule(loginModule.getLoginStructPtr());
}
void Controller::showUserCreationModule() {

	// creates UserCreationModule and the views to create
	// a user
	UserCreationModule ucm;

	// If they create a new user this module also generates a
	// login struct and we pass it to the accountModule
	showAccountModule(ucm.getLoginStructPtr());
}

// requires a pointer to the login struct generated by either
// the user creation module or hte login module
void Controller::showAccountModule(LoginStruct* loginStruct) {

	// Loop because once we're in the account Module we just
	// move around in there.
	while(true) {

		// create an account module
		AccountModule accountModule(loginStruct);

		// launch into the new account module if that is
		// selected otherwise just go back to the 
		// account module
		if (accountModule.getCreateNewSelected()) {

			NewAccountModule newAccountModule(loginStruct);
		}
	}
}